/* 
Типи даних в JS
Boolean - логічний тип - true або false
Number - будь-які числа
String - це будь які строки (текст)

null - спеціальне "пусте" значення
undefined - тип "невизначченість" */

let variable; /* Декларація (інізціялізація) змінної */
variable = "hello"; /* Присвоювання значення */


let box = 5; /* Створи змінну з ім'ям box і поклади в неї 5 */

//// вот на цьому етапі в box ще число 5

box = 10;

////// вот тут box має число 10

box = "text";

/* 
Оператор

typeof

+ додавання
- віднімання
* множення
/ ділення

*/

let box1 = 25;
let box2 = 'hello world';

/* Numing (називання) змнінних

Назва змінної має пояснювати, ля чого вона є або що всередині
В JS використовують camelCase

let userInputValue;
let userName;
let userAvatarURL;
*/
// const userNickName; //  ERROR!


const userName = 'John';
// userName ='Rick';

const PI = 3.14;

box = 1;

let result = 0;
result = box + 1; // 2

box = box + 4; // 5
box = box * 2; // 10


let newResult = 2;
newResult = newResult * 5; // 10
newResult = newResult / 2; // 5
newResult = newResult + 1; // 6

//result = result +5;
result += 5;
//result = - 2;
result - 2;
//ressult = result * 4;
result *= 4;
//result = result / 2;
result /= 2;


/* Інкремент/Декремент*/

let value = 0;
//value = value + 1;
value++; //Інкремент - збільшенні значення на 1
value--; //Декремент - зменшення значення на 1
//value = value - 1;

//Посфікс (спочатку ім'я змінной, потім оператор)
value++;
value--;
// Спочатку використовується значення змінної, а потім вікористовуєтьсяоперація збільшення/зменшення
result = value++;

//Префіксна форма (спочатку оператор, а потім ім'я змінної)
++value;
--value;
result = ++value; //Спочатку збільшуємо на 1, а потім таке саме значення кладем в result

/* let x = 5;
x = x * 2; //10
let y = 0;
y = x + 2; // 12

y = x++ +2; // y = 12, x = 11
y = ++x +2; // y = 13, x = 11
*/
/*Number */
/* Модливі значення:
 - можливих значень
 - +Infinity (безкінечність), -Infinity
 - NaN (Not-a-Number) - не-число (непонятно шо)

 NaN стає результатм "неправильних" обчислень (наприклад, множення або ділення числа на рядок)*/

 3 / 0 //Infinity
 3 / Infinity //0

 /* Оператори -, *,/ працують тільки з числами
 Оператор +, якщо обидва операнда - числа - працює як матемитичний оператор "+"Яко обидва операнда - рядки, він працює на конкатенакію (склеювання рякіів) 
 Якщо хоч один операнд "+" є рядком, то ВСІ операнди виразу НЕЯВНО приводяться до рядка
 */

 /*Неявне приведення даних */
 //Неявне приведенния типу відбувається, коли операнди різних типів даних
 //Якщо один з операндів + - рядок, то всі операнди стають рядком, результат теж рядок
 //Якщо один з операндів при -, *, / і рядком то його НАМАГАЮТЬСЯ привести ло числа: 
 // якщо цей операнд приводиться до числа (напр. це"345" - 345), то відбувається математична операція
 // якщо цей операнд немодливо зробити чмслом (напр. "абч"), то результат буде NaN 

 /*
 to Number
 true -> 1
 false -> 0
 '345' -> 345
 'a'-> NaN

to String
2 -> '2'
true -> 'true'
'3n' -> 3
nul -> 'null'
undefind -> 'undefind'


to Boolean
0 ->fasle
1, 2, 3, ..... -> true (будь=яке число не 0)
nul -> false
undefind -> false
NaN-> fasle
Infinity -> true
' ' -> false
'a' -> true (будь-яка літера, рядок з долвиною більше 0)

 */


/* 
Зведення у ступінь*/ 

let x = 2;
x = x * 2; // 4
x = x**2; // 8

/* 
Операції порівняння
Результвтом буде тип аних Boolean (тоюто, або true, або false)

3 > 2 //true
5 > 8 //false

*/

let word1 = "cat";
let word2 = "dog";

word2 > word1

/* 
 Оператор " +" -  це оператор присвоювання значення

 == - оператор порівнення з приведенням (автоматично і неявно ПРИВОДИТЬ типи даних операндів до одного типу)
=== - оператор порівняння без приведення (порівнює і за значенням, і за типом даних)

3 == 3 // true
4 === 4 // true
3 == '3' // true - приводить типи!
3 === '3'//false - порівнення не тільки за значенням, але й за типом даних

! - оператор логічного заперечення

Оператор "не дорівнює"

!= - не дорівнює (типи приволяться до одного)
!== - не дорівнює (без приведення до одного)

3 != 3 // fasle, бо 3 == 3, вони дорівнюють одне одного
4 !== 3 // true, бо дійсно 4 не 3

3 != '3' // false, бо  String приводиться до Number
3 !-- '3' // true, бо порівнюіться не тілье=ки за значенням, але й за типом даних, а String не дорівнює Number



Залишок від цілочисленного поділу (%)
Ділення по модулю

Ціле число, яке залищається від цілочисленного поділу двох операндів
6 % 3 // 1
6 % 2 // 0

*/
